!function(e,r){"object"==typeof exports?module.exports=exports=r(require("./core"),require("./sha1"),require("./hmac")):"function"==typeof define&&define.amd?define(["./core","./sha1","./hmac"],r):r(e.CryptoJS)}(this,function(e){return function(){var r=e,t=r.lib,i=t.Base,o=t.WordArray,n=r.algo,c=n.SHA1,s=n.HMAC,a=n.PBKDF2=i.extend({cfg:i.extend({keySize:4,hasher:c,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,r){for(var t=this.cfg,i=s.create(t.hasher,e),n=o.create(),c=o.create([1]),a=n.words,f=c.words,u=t.keySize,h=t.iterations;a.length<u;){var d=i.update(r).finalize(c);i.reset();for(var p=d.words,l=p.length,y=d,v=1;h>v;v++){y=i.finalize(y),i.reset();for(var _=y.words,g=0;l>g;g++)p[g]^=_[g]}n.concat(d),f[0]++}return n.sigBytes=4*u,n}});r.PBKDF2=function(e,r,t){return a.create(t).compute(e,r)}}(),e.PBKDF2});